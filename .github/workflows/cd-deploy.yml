name: CD Deploy

on:
  workflow_run:
    workflows: ["CI Build"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      force-deploy:
        description: 'Force deploy (skip pipeline checks)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  check-pipelines:
    name: Check All Pipelines
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || inputs.force-deploy == true
    outputs:
      should-deploy: ${{ steps.pipeline-check.outputs.should_deploy }}
      commit-sha: ${{ steps.commit-details.outputs.commit_sha }}
    steps:
      - name: Get commit details
        id: commit-details
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_SHA="${{ github.sha }}"
          else
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          fi
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Check pipeline status
        id: pipeline-check
        run: |
          COMMIT_SHA="${{ steps.commit-details.outputs.commit_sha }}"
          
          if [ "${{ inputs.force-deploy }}" = "true" ]; then
            echo "üöÄ Force deploy enabled"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get workflow runs for this commit
          QUALITY_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Quality\") | .conclusion" | head -1)
          SECURITY_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Security\") | .conclusion" | head -1)
          BUILD_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Build\") | .conclusion" | head -1)
          
          echo "üìä Pipeline Status:"
          echo "- Quality: ${QUALITY_STATUS:-unknown}"
          echo "- Security: ${SECURITY_STATUS:-unknown}"
          echo "- Build: ${BUILD_STATUS:-unknown}"
          
          if [[ "$QUALITY_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$BUILD_STATUS" == "success" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All pipelines succeeded"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚è≥ Not all pipelines completed successfully"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: check-pipelines
    if: needs.check-pipelines.outputs.should-deploy == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get build artifacts
        run: |
          COMMIT_SHA="${{ needs.check-pipelines.outputs.commit-sha }}"
          ARTIFACT_NAME="build-files-$COMMIT_SHA"
          
          # Get the build run ID
          BUILD_RUN_ID=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Build\" and .conclusion == \"success\") | .id" \
            | head -1)
          
          if [ -z "$BUILD_RUN_ID" ]; then
            echo "‚ùå No successful CI Build run found"
            exit 1
          fi
          
          # Download artifacts
          ARTIFACT_URL=$(gh api repos/${{ github.repository }}/actions/runs/$BUILD_RUN_ID/artifacts \
            --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .archive_download_url")
          
          mkdir -p dist
          curl -L -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$ARTIFACT_URL" -o artifact.zip
          
          unzip -q artifact.zip -d dist/
          rm artifact.zip
          
          echo "‚úÖ Artifacts downloaded"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment success
        run: |
          echo "üéâ Deployment successful!"
          echo "üìç URL: ${{ steps.deployment.outputs.page_url }}"