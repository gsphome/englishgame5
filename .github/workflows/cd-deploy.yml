name: CD Deploy

on:
  workflow_run:
    workflows: ["CI Build"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      force-deploy:
        description: 'Force deploy (skip pipeline checks)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  check-pipelines:
    name: Check All Pipelines
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || inputs.force-deploy == true
    outputs:
      should-deploy: ${{ steps.pipeline-check.outputs.should_deploy }}
      commit-sha: ${{ steps.commit-details.outputs.commit_sha }}
    steps:
      - name: Get commit details
        id: commit-details
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_SHA="${{ github.sha }}"
          else
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          fi
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Check pipeline status
        id: pipeline-check
        run: |
          COMMIT_SHA="${{ steps.commit-details.outputs.commit_sha }}"
          
          if [ "${{ inputs.force-deploy }}" = "true" ]; then
            echo "üöÄ Force deploy enabled"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get workflow runs for this commit
          QUALITY_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Quality\") | .conclusion" | head -1)
          SECURITY_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Security\") | .conclusion" | head -1)
          BUILD_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Build\") | .conclusion" | head -1)
          
          echo "üìä Pipeline Status for commit $COMMIT_SHA:"
          echo "- Quality: ${QUALITY_STATUS:-‚ùì not found}"
          echo "- Security: ${SECURITY_STATUS:-‚ùì not found}"
          echo "- Build: ${BUILD_STATUS:-‚ùì not found}"
          
          # Check if all pipelines exist and succeeded
          MISSING_PIPELINES=""
          FAILED_PIPELINES=""
          
          if [ -z "$QUALITY_STATUS" ]; then
            MISSING_PIPELINES="$MISSING_PIPELINES CI-Quality"
          elif [ "$QUALITY_STATUS" != "success" ]; then
            FAILED_PIPELINES="$FAILED_PIPELINES CI-Quality($QUALITY_STATUS)"
          fi
          
          if [ -z "$SECURITY_STATUS" ]; then
            MISSING_PIPELINES="$MISSING_PIPELINES CI-Security"
          elif [ "$SECURITY_STATUS" != "success" ]; then
            FAILED_PIPELINES="$FAILED_PIPELINES CI-Security($SECURITY_STATUS)"
          fi
          
          if [ -z "$BUILD_STATUS" ]; then
            MISSING_PIPELINES="$MISSING_PIPELINES CI-Build"
          elif [ "$BUILD_STATUS" != "success" ]; then
            FAILED_PIPELINES="$FAILED_PIPELINES CI-Build($BUILD_STATUS)"
          fi
          
          if [[ "$QUALITY_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$BUILD_STATUS" == "success" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All pipelines succeeded - deployment approved"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Deployment blocked:"
            [ -n "$MISSING_PIPELINES" ] && echo "  Missing:$MISSING_PIPELINES"
            [ -n "$FAILED_PIPELINES" ] && echo "  Failed:$FAILED_PIPELINES"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: check-pipelines
    if: needs.check-pipelines.outputs.should-deploy == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get build artifacts
        run: |
          COMMIT_SHA="${{ needs.check-pipelines.outputs.commit-sha }}"
          ARTIFACT_NAME="build-files-$COMMIT_SHA"
          
          # Get the build run ID
          BUILD_RUN_ID=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"CI Build\" and .conclusion == \"success\") | .id" \
            | head -1)
          
          if [ -z "$BUILD_RUN_ID" ]; then
            echo "‚ùå No successful CI Build run found"
            exit 1
          fi
          
          # Download artifacts
          ARTIFACT_URL=$(gh api repos/${{ github.repository }}/actions/runs/$BUILD_RUN_ID/artifacts \
            --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .archive_download_url")
          
          mkdir -p dist
          curl -L -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$ARTIFACT_URL" -o artifact.zip
          
          unzip -q artifact.zip -d dist/
          rm artifact.zip
          
          echo "‚úÖ Artifacts downloaded"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment success
        run: |
          echo "üéâ Deployment successful!"
          echo "üìç URL: ${{ steps.deployment.outputs.page_url }}"

  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [check-pipelines, deploy]
    if: always()
    steps:
      - name: Validate deployment outcome
        run: |
          echo "üìä Deployment Gate - Final Validation"
          echo "====================================="
          
          # Check if pipeline check failed
          if [ "${{ needs.check-pipelines.result }}" != "success" ]; then
            echo "‚ùå Pipeline check job failed"
            echo "üîç Check the 'Check All Pipelines' job for details"
            exit 1
          fi
          
          # Get deployment decision
          SHOULD_DEPLOY="${{ needs.check-pipelines.outputs.should-deploy }}"
          DEPLOY_RESULT="${{ needs.deploy.result }}"
          
          echo "üéØ Deployment Decision: $SHOULD_DEPLOY"
          echo "üìã Deploy Job Result: $DEPLOY_RESULT"
          
          if [ "$SHOULD_DEPLOY" == "true" ]; then
            # Deployment should have happened
            if [ "$DEPLOY_RESULT" == "success" ]; then
              echo "‚úÖ SUCCESS: Deployment completed successfully"
              echo "üåê Application is live and accessible"
            elif [ "$DEPLOY_RESULT" == "failure" ]; then
              echo "‚ùå FAILURE: Deployment job failed during execution"
              echo "ÔøΩ Cheick the 'Deploy to Production' job for error details"
              exit 1
            elif [ "$DEPLOY_RESULT" == "skipped" ]; then
              echo "‚ùå FAILURE: Deployment was unexpectedly skipped"
              echo "üêõ This indicates a workflow logic error"
              exit 1
            else
              echo "‚ùå FAILURE: Deployment job in unknown state: $DEPLOY_RESULT"
              exit 1
            fi
          else
            # Deployment should not have happened
            if [ "$DEPLOY_RESULT" == "skipped" ]; then
              echo "‚ùå FAILURE: Deployment blocked due to pipeline requirements"
              echo "üìã Required pipelines must all succeed:"
              echo "   - CI Quality: must be 'success'"
              echo "   - CI Security: must be 'success'" 
              echo "   - CI Build: must be 'success'"
              echo ""
              echo "üîç Check the 'Check All Pipelines' job for specific failures"
              exit 1
            else
              echo "‚ùå FAILURE: Unexpected deployment state when should_deploy=false"
              echo "üêõ Deploy result: $DEPLOY_RESULT (expected: skipped)"
              exit 1
            fi
          fi