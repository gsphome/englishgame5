name: CI/CD Pipeline (Improved)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

# Cancel previous runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Job paralelo para validaciones rápidas
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: TypeScript check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Security audit (quick)
        run: npm audit --audit-level=high --production

  # Tests en paralelo
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.quick-checks.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run tests
        run: |
          if [ "${{ matrix.test-type }}" == "unit" ]; then
            npm run test:unit
          else
            npm run test:integration
          fi

      - name: Generate coverage (unit only)
        if: matrix.test-type == 'unit'
        run: npm run test:coverage

      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # Build optimizado
  build:
    name: Build & Analyze
    runs-on: ubuntu-latest
    needs: [quick-checks, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.quick-checks.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "📦 Build Analysis:"
          echo "Total size: $(du -sh dist/ | cut -f1)"
          echo ""
          echo "🔍 Largest files:"
          find dist/ -name "*.js" -o -name "*.css" | xargs du -h | sort -hr | head -10
          echo ""
          echo "📊 File count by type:"
          echo "JS files: $(find dist/ -name "*.js" | wc -l)"
          echo "CSS files: $(find dist/ -name "*.css" | wc -l)"
          echo "Assets: $(find dist/ -type f ! -name "*.js" ! -name "*.css" ! -name "*.html" | wc -l)"

      - name: Check bundle size limits
        run: |
          MAIN_JS_SIZE=$(find dist/assets -name "index-*.js" -exec du -k {} \; | cut -f1)
          if [ $MAIN_JS_SIZE -gt 1000 ]; then
            echo "⚠️ Warning: Main bundle is ${MAIN_JS_SIZE}KB (>1MB)"
            echo "Consider code splitting or lazy loading"
          else
            echo "✅ Bundle size OK: ${MAIN_JS_SIZE}KB"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Security checks mejorados
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.quick-checks.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Full security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

  # Deploy condicional
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment summary
        run: |
          echo "🚀 Deployment successful!"
          echo "📍 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📦 Build SHA: ${{ github.sha }}"
          echo "⏰ Deployed at: $(date)"

  # Notificaciones mejoradas
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quick-checks, test, build, security-scan, deploy]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "## 📋 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result == 'success' && '✅' || needs.deploy.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY