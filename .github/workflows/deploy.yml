name: Deploy Pipeline

on:
  # Trigger when individual pipelines complete successfully
  workflow_run:
    workflows: ["Quality Checks", "Security Checks", "Build Pipeline"]
    types:
      - completed
    branches: [main]
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force-deploy:
        description: 'Force deploy (skip pipeline checks)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Only one deployment at a time
concurrency:
  group: deploy-production
  cancel-in-progress: false

env:
  NODE_VERSION: '18'

jobs:
  check-pipelines:
    name: Check All Pipelines
    runs-on: ubuntu-latest
    # Only run if the triggering workflow succeeded OR manual force deploy
    if: github.event.workflow_run.conclusion == 'success' || inputs.force-deploy == true
    outputs:
      should-deploy: ${{ steps.pipeline-check.outputs.should_deploy }}
      commit-sha: ${{ steps.commit-details.outputs.commit_sha }}
      quality-status: ${{ steps.pipeline-check.outputs.quality_status }}
      security-status: ${{ steps.pipeline-check.outputs.security_status }}
      build-status: ${{ steps.pipeline-check.outputs.build_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit details
        id: commit-details
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_SHA="${{ github.sha }}"
          else
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          fi
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "üîç Checking pipelines for commit: $COMMIT_SHA"

      - name: Check pipeline status
        id: pipeline-check
        run: |
          COMMIT_SHA="${{ steps.commit-details.outputs.commit_sha }}"
          
          if [ "${{ inputs.force-deploy }}" = "true" ]; then
            echo "üöÄ Force deploy enabled - skipping pipeline checks"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "quality_status=force-deploy" >> $GITHUB_OUTPUT
            echo "security_status=force-deploy" >> $GITHUB_OUTPUT
            echo "build_status=force-deploy" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üîç Checking pipeline status for commit: $COMMIT_SHA"
          
          # Get workflow runs for this commit
          QUALITY_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"Quality Checks\") | .conclusion" | head -1)
          SECURITY_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"Security Checks\") | .conclusion" | head -1)
          BUILD_STATUS=$(gh api repos/${{ github.repository }}/actions/runs --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"Build Pipeline\") | .conclusion" | head -1)
          
          echo "quality_status=${QUALITY_STATUS:-unknown}" >> $GITHUB_OUTPUT
          echo "security_status=${SECURITY_STATUS:-unknown}" >> $GITHUB_OUTPUT
          echo "build_status=${BUILD_STATUS:-unknown}" >> $GITHUB_OUTPUT
          
          echo "üìä Pipeline Status:"
          echo "- Quality: ${QUALITY_STATUS:-unknown}"
          echo "- Security: ${SECURITY_STATUS:-unknown}"
          echo "- Build: ${BUILD_STATUS:-unknown}"
          
          # Check if all required pipelines succeeded
          if [[ "$QUALITY_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$BUILD_STATUS" == "success" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All pipelines succeeded - ready for deployment"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚è≥ Not all pipelines completed successfully"
            echo "Deployment blocked until all pipelines pass"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Pipeline summary
        run: |
          echo "## üöÄ DEPLOY PIPELINE - GATE CHECK" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ steps.commit-details.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Pipeline Gate Status" >> $GITHUB_STEP_SUMMARY
          echo "| Pipeline | Status | Required | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ steps.pipeline-check.outputs.quality_status }} | ‚úÖ Success | ${{ steps.pipeline-check.outputs.quality_status == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ steps.pipeline-check.outputs.security_status }} | ‚úÖ Success | ${{ steps.pipeline-check.outputs.security_status == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ steps.pipeline-check.outputs.build_status }} | ‚úÖ Success | ${{ steps.pipeline-check.outputs.build_status == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.pipeline-check.outputs.should_deploy }}" == "true" ]]; then
            echo "### ‚úÖ DEPLOYMENT: PROCEEDING" >> $GITHUB_STEP_SUMMARY
            echo "All quality gates passed - deployment will proceed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚è≥ DEPLOYMENT: BLOCKED" >> $GITHUB_STEP_SUMMARY
            echo "Waiting for all pipelines to complete successfully" >> $GITHUB_STEP_SUMMARY
          fi

  pre-deploy-checks:
    name: Pre-Deploy Verification
    runs-on: ubuntu-latest
    needs: check-pipelines
    if: needs.check-pipelines.outputs.should-deploy == 'true'
    environment: production
    steps:
      - name: Gate verification
        run: |
          echo "üéØ Verifying deployment gates..."
          
          QUALITY_STATUS="${{ needs.check-pipelines.outputs.quality-status }}"
          SECURITY_STATUS="${{ needs.check-pipelines.outputs.security-status }}"
          BUILD_STATUS="${{ needs.check-pipelines.outputs.build-status }}"
          
          if [ "${{ inputs.force-deploy }}" = "true" ]; then
            echo "üöÄ Force deploy mode - skipping gate verification"
            echo "‚ö†Ô∏è WARNING: Deploying without full pipeline validation"
            exit 0
          fi
          
          echo "üìä Gate Status:"
          echo "- Quality: $QUALITY_STATUS"
          echo "- Security: $SECURITY_STATUS"
          echo "- Build: $BUILD_STATUS"
          
          if [[ "$QUALITY_STATUS" != "success" || "$SECURITY_STATUS" != "success" || "$BUILD_STATUS" != "success" ]]; then
            echo "üö® DEPLOY BLOCKED: Not all gates passed"
            exit 1
          fi
          
          echo "‚úÖ All deployment gates verified"
          echo "üéâ Proceeding with deployment..."

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-pipelines, pre-deploy-checks]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get build workflow run ID
        id: get-build-run
        run: |
          COMMIT_SHA="${{ needs.check-pipelines.outputs.commit-sha }}"
          
          # Get the most recent successful Build Pipeline run for this commit
          BUILD_RUN_ID=$(gh api repos/${{ github.repository }}/actions/runs \
            --jq ".workflow_runs[] | select(.head_sha == \"$COMMIT_SHA\" and .name == \"Build Pipeline\" and .conclusion == \"success\") | .id" \
            | head -1)
          
          if [ -z "$BUILD_RUN_ID" ]; then
            echo "‚ùå No successful Build Pipeline run found for commit: $COMMIT_SHA"
            exit 1
          fi
          
          echo "build_run_id=$BUILD_RUN_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Found Build Pipeline run: $BUILD_RUN_ID"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download build artifacts
        run: |
          COMMIT_SHA="${{ needs.check-pipelines.outputs.commit-sha }}"
          ARTIFACT_NAME="build-files-$COMMIT_SHA"
          BUILD_RUN_ID="${{ steps.get-build-run.outputs.build_run_id }}"
          
          echo "üîç Downloading artifact: $ARTIFACT_NAME from run: $BUILD_RUN_ID"
          
          # Get artifact download URL
          ARTIFACT_URL=$(gh api repos/${{ github.repository }}/actions/runs/$BUILD_RUN_ID/artifacts \
            --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .archive_download_url")
          
          if [ -z "$ARTIFACT_URL" ]; then
            echo "‚ùå Artifact not found: $ARTIFACT_NAME"
            exit 1
          fi
          
          # Download and extract artifact
          mkdir -p dist
          curl -L -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$ARTIFACT_URL" -o artifact.zip
          
          unzip -q artifact.zip -d dist/
          rm artifact.zip
          
          echo "‚úÖ Artifact downloaded and extracted to dist/"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Verify artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Deploy failed: dist directory not found"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Deploy failed: index.html not found"
            exit 1
          fi
          
          echo "‚úÖ Artifacts verified"
          echo "üìä Artifact contents:"
          find dist/ -type f | head -10

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment verification
        run: |
          echo "üöÄ Verifying deployment..."
          # Wait a moment for deployment to be ready
          sleep 10
          
          # Basic check that the URL responds
          DEPLOY_URL="${{ steps.deployment.outputs.page_url }}"
          if curl -f -s "$DEPLOY_URL" > /dev/null; then
            echo "‚úÖ Deployment verification passed"
          else
            echo "‚ö†Ô∏è Deployment URL not immediately accessible (may take a few minutes)"
          fi

  deploy-summary:
    name: Deploy Summary
    runs-on: ubuntu-latest
    needs: [check-pipelines, pre-deploy-checks, deploy]
    if: always()
    outputs:
      status: ${{ steps.summary.outputs.status }}
    steps:
      - name: Generate deployment summary
        id: summary
        run: |
          echo "## üöÄ DEPLOY PIPELINE - FINAL SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline:** Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ needs.check-pipelines.outputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Force Deploy:** ${{ inputs.force-deploy || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Gate verification status
          echo "### üö™ Gate Verification Results" >> $GITHUB_STEP_SUMMARY
          echo "| Gate | Status | Result | Action Required |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|--------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.check-pipelines.outputs.quality-status }} | ${{ needs.check-pipelines.outputs.quality-status == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | ${{ needs.check-pipelines.outputs.quality-status == 'success' && 'None' || 'Fix quality issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.check-pipelines.outputs.security-status }} | ${{ needs.check-pipelines.outputs.security-status == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | ${{ needs.check-pipelines.outputs.security-status == 'success' && 'None' || 'Fix security issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.check-pipelines.outputs.build-status }} | ${{ needs.check-pipelines.outputs.build-status == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | ${{ needs.check-pipelines.outputs.build-status == 'success' && 'None' || 'Fix build issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment steps status
          echo "### üîß Deployment Steps" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Description | Action Required |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-------------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pipeline Check | ${{ needs.check-pipelines.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Gate verification | ${{ needs.check-pipelines.result == 'success' && 'None' || 'Check pipeline status' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-Deploy | ${{ needs.pre-deploy-checks.result == 'success' && '‚úÖ PASS' || needs.pre-deploy-checks.result == 'skipped' && '‚è≠Ô∏è SKIP' || '‚ùå FAIL' }} | Final verification | ${{ needs.pre-deploy-checks.result == 'success' && 'None' || 'Check gate failures' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result == 'success' && '‚úÖ PASS' || needs.deploy.result == 'skipped' && '‚è≠Ô∏è SKIP' || '‚ùå FAIL' }} | GitHub Pages deployment | ${{ needs.deploy.result == 'success' && 'None' || 'Check deployment logs' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.check-pipelines.outputs.should-deploy }}" == "true" && 
                "${{ needs.pre-deploy-checks.result }}" == "success" && 
                "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "### ‚úÖ OVERALL STATUS: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- üåê URL: GitHub Pages URL" >> $GITHUB_STEP_SUMMARY
            echo "- üì¶ Build SHA: ${{ needs.check-pipelines.outputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- üïê Deployed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Security Verification:**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Quality gate: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Security gate: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Build gate: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.check-pipelines.outputs.should-deploy }}" == "false" ]]; then
            echo "status=blocked" >> $GITHUB_OUTPUT
            echo "### ‚è≥ OVERALL STATUS: BLOCKED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment blocked - not all pipelines passed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Required Actions:**" >> $GITHUB_STEP_SUMMARY
            echo "- Fix failing pipelines and push new commit" >> $GITHUB_STEP_SUMMARY
            echo "- Or use manual deploy with force-deploy option" >> $GITHUB_STEP_SUMMARY
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "### ‚ùå OVERALL STATUS: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment failed during execution**" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for specific error details" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**For AI Analysis:** DEPLOY_PIPELINE_STATUS=${{ needs.deploy.result == 'success' && 'SUCCESS' || 'FAILURE' }}" >> $GITHUB_STEP_SUMMARY

      - name: Success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "üõ°Ô∏è All security gates passed"
          echo "üì¶ Build SHA: ${{ needs.check-pipelines.outputs.commit-sha }}"

      - name: Blocked notification
        if: needs.check-pipelines.outputs.should-deploy == 'false'
        run: |
          echo "‚è≥ Deployment blocked!"
          echo "Not all pipelines completed successfully"
          echo "Fix issues and push new commit, or use force-deploy option"

      - name: Failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the deployment logs for details"