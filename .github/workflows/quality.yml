name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:
  # Allow other workflows to trigger this
  workflow_call:
    outputs:
      quality-status:
        description: "Overall quality status"
        value: ${{ jobs.quality-summary.outputs.status }}

permissions:
  contents: read

# Cancel previous runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  quality-unified:
    name: Quality Pipeline (Unified)
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.summary.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run Quality Pipeline
        run: npm run ci:quality

      - name: Generate coverage report (if tests passed)
        if: success()
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: quality-pipeline

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [quality-unified]
    if: always()
    outputs:
      status: ${{ steps.summary.outputs.status }}
    steps:
      - name: Generate quality summary
        id: summary
        run: |
          echo "## üéØ QUALITY PIPELINE - FINAL SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline:** Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Detailed results table
          echo "### üìä Detailed Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Description | Action Required |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ needs.lint.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Code linting | ${{ needs.lint.result == 'success' && 'None' || 'Fix linting errors' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ${{ needs.type-check.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Type checking | ${{ needs.type-check.result == 'success' && 'None' || 'Fix type errors' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Unit test suite | ${{ needs.unit-tests.result == 'success' && 'None' || 'Fix failing tests' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Integration test suite | ${{ needs.integration-tests.result == 'success' && 'None' || 'Fix integration issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Format | ${{ needs.code-format.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }} | Prettier formatting | ${{ needs.code-format.result == 'success' && 'None' || 'Run npm run format' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status based on unified pipeline result
          if [[ "${{ needs.quality-unified.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "### ‚úÖ OVERALL STATUS: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **Quality pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Unified Pipeline Benefits:**" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Consistent execution with local development" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Single source of truth for quality checks" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Enhanced error handling and reporting" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Quality gate: ‚úÖ CLEARED" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for deployment (pending security and build)" >> $GITHUB_STEP_SUMMARY
          else
            echo "status=failure" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ùå OVERALL STATUS: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Quality Pipeline Failed**" >> $GITHUB_STEP_SUMMARY
            echo "The unified quality pipeline detected issues. Check the detailed logs above." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Local Reproduction:**" >> $GITHUB_STEP_SUMMARY
            echo "Run \`npm run pipeline:quality\` locally to reproduce and fix issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Impact:**" >> $GITHUB_STEP_SUMMARY
            echo "- üö´ Quality gate: BLOCKED" >> $GITHUB_STEP_SUMMARY
            echo "- üö´ Deployment: BLOCKED until issues resolved" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**For AI Analysis:** QUALITY_PIPELINE_STATUS=${{ needs.lint.result == 'success' && needs.type-check.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.code-format.result == 'success' && 'SUCCESS' || 'FAILURE' }}" >> $GITHUB_STEP_SUMMARY

  notify-quality-issues:
    name: Quality Issue Notification
    runs-on: ubuntu-latest
    needs: [quality-summary]
    if: needs.quality-summary.outputs.status == 'failure'
    steps:
      - name: Quality alert
        run: |
          echo "‚ö†Ô∏è Quality issues detected!"
          echo "Check the Quality Summary for details"
          echo "This may block CI/CD pipeline until resolved"